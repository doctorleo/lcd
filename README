This is process of learning LCD based on exynos4412.


1. Platform : fs4412 based on samsung exynos4412.
2. Interface: FIMD Fully Interactive Mobile Display.
3. Drivers  : Device Tree fimd:
3.1 platform_device:
    fimd: fimd@11c00000 {
        compatible = "samsung,exynos4210-fimd";
        interrupt-parent = <&combiner>;
        reg = <0x11c00000 0x20000>;
        interrupt-names = "fifo", "vsync", "lcd_sys";
        interrupts = <11 0>, <11 1>, <11 2>;
        clocks = <&clock 140>, <&clock 283>;
        clock-names = "sclk_fimd", "fimd";
        samsung,power-domain = <&pd_lcd0>;
        status = "disabled";
    };

    fimd@11c00000 {
        pinctrl-0 = <&lcd_clk &lcd_data24 &pwm1_out>;
        pinctrl-names = "default";
        status = "okay";
    };


&fimd {
    pinctrl-0 = <&lcd_clk &lcd_data24 &pwm1_out>;
    pinctrl-names = "default";
    status = "okay";
    display-timings {
        native-mode = <&timing0>;
        timing0: timing {
            hsync-active = <0>;
            vsync-active = <0>;
            de-active = <0>;
            pixelclk-active = <1>;

            clock-frequency = <51206400>;
            hactive = <1024>;
            vactive = <600>;
            hfront-porch = <150>;
            hback-porch = <160>;
            hsync-len = <10>;
            vback-porch = <22>;
            vfront-porch = <12>;
            vsync-len = <1>;
        };
    };  
};

3.2 platform_driver:
// drivers/gpu/drm/exynos/exynos_drm_fimd.c
static const struct of_device_id fimd_driver_dt_match[] = {
    { .compatible = "samsung,s3c6400-fimd",
      .data = &s3c64xx_fimd_driver_data },
    { .compatible = "samsung,exynos4210-fimd",
      .data = &exynos4_fimd_driver_data },
    { .compatible = "samsung,exynos5250-fimd",
      .data = &exynos5_fimd_driver_data },
    {},  
};

struct platform_driver fimd_driver = {
    .probe      = fimd_probe,
    .remove     = fimd_remove,
    .driver     = {
        .name   = "exynos4-fb",
        .owner  = THIS_MODULE,
        .pm = &fimd_pm_ops,
        .of_match_table = fimd_driver_dt_match,
    },
};

4. drm
4.1 what is drm?
    KMS: Kernel Module Setting ===> Change Resolution and Depth.
    DRI: Direct Rendering Infrastructure ===> Interface to access hardware directly.
    GEM: Graphics Extension Manager ===> Buffer Management.
    DRM Driver: Driver in kernel side ===> Access Hardware.


    Device Indenpendent kernel-level device driver for XFree86 DRI.
    Kernel module that gives direct hardware access to DRI Client.
    Contains Code intended to support the needs of complex graphics devices.
    Deals with DMA, AGP Memory management, resource locking, and secure hardware access.
// https://01.org/linuxgraphics/gfx-docs/drm/gpu/index.html
// http://dri.sourceforge.net/doc/DRIintro.html
// https://dri.freedesktop.org/wiki/Documentation/

